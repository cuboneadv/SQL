# SUBQUERY를 (2번) 이용한 풀이
-- SELECT ID
-- FROM ECOLI_DATA
-- WHERE PARENT_ID IN (
--     SELECT ID
--     FROM ECOLI_DATA
--     WHERE PARENT_ID IN (
--         SELECT ID
--         FROM ECOLI_DATA
--         WHERE PARENT_ID IS NULL
--         )
--     )
-- ORDER BY ID;

# JOIN을 (2번) 이용한 풀이
-- SELECT C.ID
-- FROM ECOLI_DATA A
-- JOIN ECOLI_DATA B ON A.ID = B.PARENT_ID
-- JOIN ECOLI_DATA C ON B.ID = C.PARENT_ID
-- WHERE A.PARENT_ID IS NULL
-- ORDER BY C.ID;

# WITH RECURSIVE를 이용한 풀이
# 이전 세대의 자식 ID가 다음 세대의 부모 ID가 되는 쿼리가 반복적으로 사용됨
# 따라서, WITH RECURSIVE를 이용한 재귀적 CTE 작업 진행
WITH RECURSIVE ECOLI_CTE AS (
    SELECT ID, PARENT_ID, 1 AS GENERATION
    FROM ECOLI_DATA
    WHERE PARENT_ID IS NULL
    UNION ALL
    SELECT D.ID, D.PARENT_ID, C.GENERATION + 1 AS GENERATION
    FROM ECOLI_DATA D
    JOIN ECOLI_CTE C ON D.PARENT_ID = C.ID
)

SELECT ID
FROM ECOLI_CTE
WHERE GENERATION = 3
ORDER BY ID;